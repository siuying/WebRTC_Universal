diff --git a/BUILD.gn b/BUILD.gn
index dec3d6f902..c4088b7404 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -167,7 +167,13 @@ config("common_inherited_config") {
   if (is_posix || is_fuchsia) {
     defines += [ "WEBRTC_POSIX" ]
   }
-  if (is_ios) {
+  if (is_catalyst) {
+    defines += [
+      "WEBRTC_MAC",
+      "WEBRTC_IOS",
+      "WEBRTC_CATALYST",
+    ]
+  } else if (is_ios) {
     defines += [
       "WEBRTC_MAC",
       "WEBRTC_IOS",
diff --git a/examples/BUILD.gn b/examples/BUILD.gn
index c2678962d7..7c532d56fd 100644
--- a/examples/BUILD.gn
+++ b/examples/BUILD.gn
@@ -293,7 +293,7 @@ if (is_ios || (is_mac && target_cpu != "x86")) {
       ":apprtc_common",
       ":socketrocket",
       "../sdk:base_objc",
-      "../sdk:default_codec_factory_objc",
+      # "../sdk:default_codec_factory_objc",
       "../sdk:file_logger_objc",
       "../sdk:helpers_objc",
       "../sdk:mediaconstraints_objc",
@@ -308,7 +308,7 @@ if (is_ios || (is_mac && target_cpu != "x86")) {
     ]
   }
 
-  if (is_ios) {
+  if (is_ios || is_catalyst) {
     rtc_library("AppRTCMobile_lib") {
       # iOS must use WebRTC.framework which is dynamically linked.
       testonly = true
@@ -346,10 +346,12 @@ if (is_ios || (is_mac && target_cpu != "x86")) {
         "../sdk:mediaconstraints_objc",
         "../sdk:peerconnectionfactory_base_objc",
         "../sdk:peerconnectionfactory_base_objc",
-        "../sdk:ui_objc",
         "../sdk:videocapture_objc",
         "../sdk:videocodec_objc",
       ]
+      if (!is_catalyst) {
+        deps += [ "../sdk:ui_objc" ]
+      }
       if (rtc_use_metal_rendering) {
         deps += [ "../sdk:metal_objc" ]
       }
@@ -499,14 +501,15 @@ if (is_ios || (is_mac && target_cpu != "x86")) {
         "../rtc_base",
         "../rtc_base/synchronization:mutex",
         "../sdk:base_objc",
-        "../sdk:default_codec_factory_objc",
+        # "../sdk:default_codec_factory_objc",
         "../sdk:helpers_objc",
         "../sdk:native_api",
-        "../sdk:ui_objc",
         "../sdk:videocapture_objc",
         "../sdk:videotoolbox_objc",
       ]
-
+      if (!is_catalyst) {
+        deps += [ "../sdk:ui_objc" ]
+      }
       if (current_cpu == "arm64") {
         deps += [ "../sdk:metal_objc" ]
       }
@@ -529,7 +532,7 @@ if (is_ios || (is_mac && target_cpu != "x86")) {
     }
   }
 
-  if (is_mac) {
+  if (is_mac && !is_catalyst) {
     rtc_library("AppRTCMobile_lib") {
       testonly = true
       sources = [
@@ -548,10 +551,12 @@ if (is_ios || (is_mac && target_cpu != "x86")) {
         "../sdk:metal_objc",
         "../sdk:peerconnectionfactory_base_objc",
         "../sdk:peerconnectionfactory_base_objc",
-        "../sdk:ui_objc",
         "../sdk:videocapture_objc",
         "../sdk:videocodec_objc",
       ]
+      if (!is_catalyst) {
+        deps += [ "../sdk:ui_objc" ]
+      }
     }
 
     mac_app_bundle("AppRTCMobile") {
diff --git a/examples/objc/AppRTCMobile/third_party/SocketRocket/SRWebSocket.m b/examples/objc/AppRTCMobile/third_party/SocketRocket/SRWebSocket.m
index 45f783feb3..cdad3e868b 100644
--- a/examples/objc/AppRTCMobile/third_party/SocketRocket/SRWebSocket.m
+++ b/examples/objc/AppRTCMobile/third_party/SocketRocket/SRWebSocket.m
@@ -17,7 +17,7 @@
 
 #import "SRWebSocket.h"
 
-#if TARGET_OS_IPHONE
+#if __has_include(<unicode/utf8.h>)
 #define HAS_ICU
 #endif
 
@@ -25,7 +25,7 @@
 #import <unicode/utf8.h>
 #endif
 
-#if TARGET_OS_IPHONE
+#if __has_include(<Endian.h>)
 #import <Endian.h>
 #else
 #import <CoreServices/CoreServices.h>
diff --git a/sdk/BUILD.gn b/sdk/BUILD.gn
index c50c01dabd..fe7235c11f 100644
--- a/sdk/BUILD.gn
+++ b/sdk/BUILD.gn
@@ -496,10 +496,12 @@ if (is_ios || is_mac) {
       deps = [
         ":base_objc",
         ":helpers_objc",
-        ":video_objc",
         ":videocapture_objc",
         ":videoframebuffer_objc",
       ]
+      if (!is_catalyst) {
+        deps += [":video_objc"]
+      }
     }
 
     if (rtc_use_metal_rendering) {
@@ -541,13 +543,15 @@ if (is_ios || is_mac) {
         deps = [
           ":base_objc",
           ":peerconnectionfactory_base_objc",
-          ":video_objc",
           ":videoframebuffer_objc",
           "../api/video:video_frame",
           "../api/video:video_rtp_headers",
           "../rtc_base:checks",
           "../rtc_base:rtc_base_approved",
         ]
+        if (!is_catalyst) {
+          deps += [":video_objc"]
+        }
         configs += [ "..:common_objc" ]
         public_configs = [ ":common_config_objc" ]
       }
@@ -590,10 +594,12 @@ if (is_ios || is_mac) {
       deps = [
         ":base_objc",
         ":helpers_objc",
-        ":video_objc",
         ":videoframebuffer_objc",
         "../rtc_base/system:gcd_helpers",
       ]
+      if (!is_catalyst) {
+        deps += [":video_objc"]
+      }
     }
 
     rtc_library("videocodec_objc") {
@@ -944,7 +950,6 @@ if (is_ios || is_mac) {
         ":mediasource_objc",
         ":native_api",
         ":native_video",
-        ":video_objc",
         ":videoframebuffer_objc",
         ":videorendereradapter_objc",
         ":videosource_objc",
@@ -983,6 +988,9 @@ if (is_ios || is_mac) {
       if (is_ios) {
         deps += [ ":native_api_audio_device_module" ]
       }
+      if (!is_catalyst) {
+        deps += [":video_objc"]
+      }
     }
 
     if (rtc_include_tests) {
@@ -1026,7 +1034,6 @@ if (is_ios || is_mac) {
             ":native_api_audio_device_module",
             ":native_video",
             ":peerconnectionfactory_base_objc",
-            ":video_objc",
             ":video_toolbox_cc",
             ":videocapture_objc",
             ":videocodec_objc",
@@ -1050,6 +1057,9 @@ if (is_ios || is_mac) {
             sources += [ "objc/unittests/RTCMTLVideoView_xctest.m" ]
             deps += [ ":metal_objc" ]
           }
+          if (!is_catalyst) {
+            deps += [":video_objc"]
+          }
 
           public_deps = [
             "//build/config/ios:xctest",
@@ -1140,7 +1150,6 @@ if (is_ios || is_mac) {
           ":native_api",
           ":native_video",
           ":peerconnectionfactory_base_objc",
-          ":video_objc",
           ":videocapture_objc",
           ":videocodec_objc",
           ":videoframebuffer_objc",
@@ -1167,6 +1176,9 @@ if (is_ios || is_mac) {
           sources += [ "objc/unittests/RTCAudioSessionTest.mm" ]
           deps += [ ":audio_session_objc" ]
         }
+        if (!is_catalyst) {
+          deps += [":video_objc"]
+        }
       }
     }
 
@@ -1201,7 +1213,6 @@ if (is_ios || is_mac) {
           "objc/components/capturer/RTCFileVideoCapturer.h",
           "objc/components/network/RTCNetworkMonitor.h",
           "objc/components/renderer/metal/RTCMTLVideoView.h",
-          "objc/components/renderer/opengl/RTCEAGLVideoView.h",
           "objc/components/renderer/opengl/RTCVideoViewShading.h",
           "objc/components/video_codec/RTCCodecSpecificInfoH264.h",
           "objc/components/video_codec/RTCDefaultVideoDecoderFactory.h",
@@ -1259,6 +1270,12 @@ if (is_ios || is_mac) {
           "objc/api/video_frame_buffer/RTCNativeMutableI420Buffer.h",
         ]
 
+        if (!is_catalyst) {
+          common_objc_headers += [
+            "objc/components/renderer/opengl/RTCEAGLVideoView.h",
+          ]
+        }
+
         if (!build_with_chromium) {
           common_objc_headers += [
             "objc/api/logging/RTCCallbackLogger.h",
@@ -1278,11 +1295,10 @@ if (is_ios || is_mac) {
         deps = [
           ":audio_objc",
           ":base_objc",
-          ":default_codec_factory_objc",
+          # ":default_codec_factory_objc",
           ":native_api",
           ":native_video",
           ":peerconnectionfactory_base_objc",
-          ":ui_objc",
           ":videocapture_objc",
           ":videocodec_objc",
           ":videotoolbox_objc",
@@ -1297,14 +1313,19 @@ if (is_ios || is_mac) {
             ":file_logger_objc",
           ]
         }
-
         frameworks = [
           "AVFoundation.framework",
           "CoreGraphics.framework",
           "CoreMedia.framework",
-          "GLKit.framework",
         ]
-
+        if (!is_catalyst) {
+          deps += [
+            ":ui_objc",
+          ]
+          frameworks += [
+            "GLKit.framework",
+          ]
+        }
         configs += [
           "..:common_objc",
           ":used_from_extension",
@@ -1410,7 +1431,7 @@ if (is_ios || is_mac) {
 
         deps = [
           ":base_objc",
-          ":default_codec_factory_objc",
+          #":default_codec_factory_objc",
           ":native_api",
           ":native_video",
           ":peerconnectionfactory_base_objc",
diff --git a/sdk/objc/components/video_codec/RTCVideoDecoderH264.mm b/sdk/objc/components/video_codec/RTCVideoDecoderH264.mm
index 667553002c..0bd993ae62 100644
--- a/sdk/objc/components/video_codec/RTCVideoDecoderH264.mm
+++ b/sdk/objc/components/video_codec/RTCVideoDecoderH264.mm
@@ -209,7 +209,9 @@ - (int)resetDecompressionSession {
 #endif
 
   CFTypeRef keys[attributesSize] = {
-#if defined(WEBRTC_IOS)
+#if defined(WEBRTC_CATALYST)
+      kCVPixelBufferMetalCompatibilityKey,
+#elif defined(WEBRTC_IOS)
       kCVPixelBufferOpenGLESCompatibilityKey,
 #elif defined(WEBRTC_MAC)
       kCVPixelBufferOpenGLCompatibilityKey,
diff --git a/sdk/objc/components/video_codec/RTCVideoEncoderH264.mm b/sdk/objc/components/video_codec/RTCVideoEncoderH264.mm
index 03a792672c..bd21e5bf6a 100644
--- a/sdk/objc/components/video_codec/RTCVideoEncoderH264.mm
+++ b/sdk/objc/components/video_codec/RTCVideoEncoderH264.mm
@@ -594,7 +594,9 @@ - (int)resetCompressionSessionWithPixelFormat:(OSType)framePixelFormat {
   // buffers retrieved from the encoder's pixel buffer pool.
   const size_t attributesSize = 3;
   CFTypeRef keys[attributesSize] = {
-#if defined(WEBRTC_IOS)
+#if defined(WEBRTC_CATALYST)
+    kCVPixelBufferMetalCompatibilityKey,
+#elif defined(WEBRTC_IOS)
     kCVPixelBufferOpenGLESCompatibilityKey,
 #elif defined(WEBRTC_MAC)
     kCVPixelBufferOpenGLCompatibilityKey,
diff --git a/webrtc.gni b/webrtc.gni
index 4272e441f0..ec21cea6cd 100644
--- a/webrtc.gni
+++ b/webrtc.gni
@@ -27,11 +27,11 @@ if (!build_with_chromium && is_component_build) {
   assert(!is_component_build, "Component builds are not supported in WebRTC.")
 }
 
+is_catalyst = is_ios && ios_sdk_name == "macosx"
+
 if (is_ios) {
   import("//build/config/ios/rules.gni")
-}
-
-if (is_mac) {
+} else if (is_mac) {
   import("//build/config/mac/rules.gni")
 }
 
@@ -100,10 +100,10 @@ declare_args() {
   rtc_enable_bwe_test_logging = false
 
   # Set this to false to skip building examples.
-  rtc_build_examples = true
+  rtc_build_examples = !is_catalyst
 
   # Set this to false to skip building tools.
-  rtc_build_tools = true
+  rtc_build_tools = !is_catalyst
 
   # Set this to false to skip building code that requires X11.
   rtc_use_x11 = use_x11
@@ -174,7 +174,7 @@ declare_args() {
   }
 
   # Determines whether Metal is available on iOS/macOS.
-  rtc_use_metal_rendering = is_mac || (is_ios && current_cpu == "arm64")
+  rtc_use_metal_rendering = is_catalyst || is_mac || (is_ios && current_cpu == "arm64")
 
   # When set to false, builtin audio encoder/decoder factories and all the
   # audio codecs they depend on will not be included in libwebrtc.{a|lib}
